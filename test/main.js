"use strict";
var chai = require("chai");
var expect = chai.expect;
var index_1 = require("../index");
describe("Check deb packages", function () {
    describe("check if installed package return true", function () {
        it("apt is installed so will return true", function (done) {
            index_1.default('apt').then(function (a) {
                expect(a).to.be.a("boolean").that.equal(true);
                done();
            }).catch(function (err) {
                expect(err).to.not.exist;
                done();
            });
        });
    });
    describe("check if not installed package return false", function () {
        it("n2n is not installed so will return false", function (done) {
            index_1.default('n2n').then(function (a) {
                expect(a).to.be.a("boolean").that.equal(false);
                done();
            }).catch(function (err) {
                expect(err).to.not.exist;
                done();
            });
        });
    });
    describe("check if absurde package return false", function () {
        it("zzzz is absurde and it return false", function (done) {
            index_1.default('zzzz').then(function (a) {
                expect(a).to.be.a("boolean").that.equal(false);
                done();
            }).catch(function (err) {
                expect(err).to.not.exist;
                done();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvbWFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsSUFBWSxJQUFJLFdBQU0sTUFBTSxDQUFDLENBQUE7QUFDN0IsSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUUzQixzQkFBcUIsVUFBVSxDQUFDLENBQUE7QUFJaEMsUUFBUSxDQUFDLG9CQUFvQixFQUFFO0lBQzNCLFFBQVEsQ0FBQyx3Q0FBd0MsRUFBRTtRQUUvQyxFQUFFLENBQUMsc0NBQXNDLEVBQUUsVUFBVSxJQUFJO1lBRXJELGVBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxDQUFDO2dCQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDN0MsSUFBSSxFQUFFLENBQUE7WUFDVixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBQyxHQUFHO2dCQUNULE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztnQkFDekIsSUFBSSxFQUFFLENBQUE7WUFDVixDQUFDLENBQUMsQ0FBQTtRQUVOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7SUFDSCxRQUFRLENBQUMsNkNBQTZDLEVBQUU7UUFHcEQsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLFVBQVUsSUFBSTtZQUMxRCxlQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsQ0FBQztnQkFDbkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7Z0JBQzlDLElBQUksRUFBRSxDQUFBO1lBQ1YsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLFVBQUMsR0FBRztnQkFDVCxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7Z0JBQ3pCLElBQUksRUFBRSxDQUFBO1lBQ1YsQ0FBQyxDQUFDLENBQUE7UUFJTixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLHVDQUF1QyxFQUFFO1FBRzlDLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxVQUFVLElBQUk7WUFDcEQsZUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUM5QyxJQUFJLEVBQUUsQ0FBQTtZQUNWLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFDLEdBQUc7Z0JBQ1QsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO2dCQUN6QixJQUFJLEVBQUUsQ0FBQTtZQUNWLENBQUMsQ0FBQyxDQUFBO1FBSU4sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUdQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvbWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNoYWkgZnJvbSBcImNoYWlcIjtcbmNvbnN0IGV4cGVjdCA9IGNoYWkuZXhwZWN0O1xuXG5pbXBvcnQgZGViY2hlY2sgZnJvbSBcIi4uL2luZGV4XCI7XG5cblxuXG5kZXNjcmliZShcIkNoZWNrIGRlYiBwYWNrYWdlc1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzY3JpYmUoXCJjaGVjayBpZiBpbnN0YWxsZWQgcGFja2FnZSByZXR1cm4gdHJ1ZVwiLCBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgaXQoXCJhcHQgaXMgaW5zdGFsbGVkIHNvIHdpbGwgcmV0dXJuIHRydWVcIiwgZnVuY3Rpb24gKGRvbmUpIHtcblxuICAgICAgICAgICAgZGViY2hlY2soJ2FwdCcpLnRoZW4oKGEpID0+IHtcbiAgICAgICAgICAgICAgICBleHBlY3QoYSkudG8uYmUuYShcImJvb2xlYW5cIikudGhhdC5lcXVhbCh0cnVlKVxuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGV4cGVjdChlcnIpLnRvLm5vdC5leGlzdDtcbiAgICAgICAgICAgICAgICBkb25lKClcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgZGVzY3JpYmUoXCJjaGVjayBpZiBub3QgaW5zdGFsbGVkIHBhY2thZ2UgcmV0dXJuIGZhbHNlXCIsIGZ1bmN0aW9uICgpIHtcblxuXG4gICAgICAgIGl0KFwibjJuIGlzIG5vdCBpbnN0YWxsZWQgc28gd2lsbCByZXR1cm4gZmFsc2VcIiwgZnVuY3Rpb24gKGRvbmUpIHtcbiAgICAgICAgICAgIGRlYmNoZWNrKCduMm4nKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLmEoXCJib29sZWFuXCIpLnRoYXQuZXF1YWwoZmFsc2UpXG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGVycikudG8ubm90LmV4aXN0O1xuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShcImNoZWNrIGlmIGFic3VyZGUgcGFja2FnZSByZXR1cm4gZmFsc2VcIiwgZnVuY3Rpb24gKCkge1xuXG5cbiAgICAgICAgaXQoXCJ6enp6IGlzIGFic3VyZGUgYW5kIGl0IHJldHVybiBmYWxzZVwiLCBmdW5jdGlvbiAoZG9uZSkge1xuICAgICAgICAgICAgZGViY2hlY2soJ3p6enonKS50aGVuKChhKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGEpLnRvLmJlLmEoXCJib29sZWFuXCIpLnRoYXQuZXF1YWwoZmFsc2UpXG4gICAgICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgICAgICB9KS5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhwZWN0KGVycikudG8ubm90LmV4aXN0O1xuICAgICAgICAgICAgICAgIGRvbmUoKVxuICAgICAgICAgICAgfSlcblxuXG5cbiAgICAgICAgfSk7XG4gICAgfSk7XG5cblxufSk7XG5cblxuXG5cblxuIl19
